if (e.value.b != 0) {
    this.color.rgb = { r: e.value.r, g: e.value.g, b: e.value.b };
}
if (e.value.h !== undefined && e.value.s !== undefined && e.value.l !== undefined) {
    this.color.hsl = { h: e.value.h, s: e.value.s, l: e.value.l };
} else if (e.value === "random") {
    this.color.rgb = {
        r: Math.floor(256 * Math.random()) + 0,
        g: Math.floor(256 * Math.random()) + 0,
        b: Math.floor(256 * Math.random()) + 0,
    };
} else if (typeof e.value === "string") {
    this.color = e;
    this.color.rgb = hexToRgb(this.color.value);
}

this.opacity = (i.particles.opacity.random ? Math.random() : 1) * i.particles.opacity.value;
if (i.particles.opacity.anim.enable) {
    this.opacity_status = false;
    this.vo = i.particles.opacity.anim.speed / 100;
    if (!i.particles.opacity.anim.sync) {
        this.vo = this.vo * Math.random();
    }
}

var n = {};
switch (i.particles.move.direction) {
    case "top":
        n = { x: 0, y: -1 };
        break;
    case "top-right":
        n = { x: 0.5, y: -0.5 };
        break;
    case "right":
        n = { x: 1, y: 0 };
        break;
    case "bottom-right":
        n = { x: 0.5, y: 0.5 };
        break;
    case "bottom":
        n = { x: 0, y: 1 };
        break;
    case "bottom-left":
        n = { x: -0.5, y: 1 };
        break;
    case "left":
        n = { x: -1, y: 0 };
        break;
    case "top-left":
        n = { x: -0.5, y: -0.5 };
        break;
    default:
        n = { x: 0, y: 0 };
}

if (i.particles.move.straight) {
    this.vx = n.x;
    this.vy = n.y;
    if (i.particles.move.random) {
        this.vx = this.vx * Math.random();
        this.vy = this.vy * Math.random();
    }
} else {
    this.vx = n.x + Math.random() - 0.5;
    this.vy = n.y + Math.random() - 0.5;
}

this.vx_i = this.vx;
this.vy_i = this.vy;

var r = i.particles.shape.type;
if (typeof r === "object") {
    if (r instanceof Array) {
        var c = r[Math.floor(Math.random() * r.length)];
        this.shape = c;
    }
} else {
    this.shape = r;
}

if (this.shape === "image") {
    var o = i.particles.shape;
    this.img = { src: o.image.src, ratio: o.image.width / o.image.height };
    if (!this.img.ratio) {
        this.img.ratio = 1;
    }
    if (i.tmp.img_type === "svg" && i.tmp.source_svg !== undefined) {
        i.fn.vendors.createSvgImg(this);
        if (i.tmp.pushing) {
            this.img.loaded = false;
        }
    }
}

i.fn.particle.prototype.draw = function () {
    function e() {
        i.canvas.ctx.drawImage(r, a.x - t, a.y - t, 2 * t, 2 * t / a.img.ratio);
    }
    var a = this;
    var t = a.radius_bubble !== undefined ? a.radius_bubble : a.radius;
    var s = a.opacity_bubble !== undefined ? a.opacity_bubble : a.opacity;
    var n = a.color.rgb ? 
        "rgba(" + a.color.rgb.r + "," + a.color.rgb.g + "," + a.color.rgb.b + "," + s + ")" : 
        "hsla(" + a.color.hsl.h + "," + a.color.hsl.s + "%," + a.color.hsl.l + "%," + s + ")";
    
    i.canvas.ctx.fillStyle = n;
    i.canvas.ctx.beginPath();
    switch (a.shape) {
        case "circle":
            i.canvas.ctx.arc(a.x, a.y, t, 0, 2 * Math.PI, false);
            break;
        case "edge":
            i.canvas.ctx.rect(a.x - t, a.y - t, 2 * t, 2 * t);
            break;
        case "triangle":
            i.fn.vendors.drawShape(i.canvas.ctx, a.x - t, a.y + t / 1.66, 2 * t, 3, 2);
            break;
        case "polygon":
            i.fn.vendors.drawShape(i.canvas.ctx, a.x - t / (i.particles.shape.polygon.nb_sides / 3.5), a.y - t / 0.76, 2.66 * t / (i.particles.shape.polygon.nb_sides / 3.5));
            break;
        case "image":
            if ("svg" == i.tmp.img_type) {
                var r = a.img.obj;
            } else {
                var r = i.tmp.img_obj;
            }
            r && e();
        }
        i.canvas.ctx.closePath();
        if (i.particles.shape.stroke.width > 0) {
            i.canvas.ctx.strokeStyle = i.particles.shape.stroke.color;
            i.canvas.ctx.lineWidth = i.particles.shape.stroke.width;
            i.canvas.ctx.stroke();
        }
        i.canvas.ctx.fill();
        
        i.fn.particlesCreate = function() {
            for (var e = 0; e < i.particles.number.value; e++) {
                i.particles.array.push(new i.fn.particle(i.particles.color, i.particles.opacity.value));
            }
        };
        
        i.fn.particlesUpdate = function() {
            for (var e = 0; e < i.particles.array.length; e++) {
                var a = i.particles.array[e];
                if (i.particles.move.enable) {
                    var t = i.particles.move.speed / 2;
                    a.x += a.vx * t;
                    a.y += a.vy * t;
                }
                if (i.particles.opacity.anim.enable) {
                    if (a.opacity_status == 1) {
                        if (a.opacity >= i.particles.opacity.value) {
                            a.opacity_status = 0;
                        }
                        a.opacity += a.vo;
                    } else {
                        if (a.opacity <= i.particles.opacity.anim.opacity_min) {
                            a.opacity_status = 1;
                        }
                        a.opacity -= a.vo;
                    }
                    if (a.opacity < 0) {
                        a.opacity = 0;
                    }
                }
                if (i.particles.size.anim.enable) {
                    if (a.size_status == 1) {
                        if (a.radius >= i.particles.size.value) {
                            a.size_status = 0;
                        }
                        a.radius += a.vs;
                    } else {
                        if (a.radius <= i.particles.size.anim.size_min) {
                            a.size_status = 1;
                        }
                        a.radius -= a.vs;
                    }
                    if (a.radius < 0) {
                        a.radius = 0;
                    }
                }
                var s;
                if (i.particles.move.out_mode == "bounce") {
                    s = { x_left: a.radius, x_right: i.canvas.w, y_top: a.radius, y_bottom: i.canvas.h };
                } else {
                    s = { x_left: -a.radius, x_right: i.canvas.w + a.radius, y_top: -a.radius, y_bottom: i.canvas.h + a.radius };
                }
                if (a.x - a.radius > i.canvas.w) {
                    a.x = s.x_left;
                    a.y = Math.random() * i.canvas.h;
                } else if (a.x + a.radius < 0) {
                    a.x = s.x_right;
                    a.y = Math.random() * i.canvas.h;
                }
                if (a.y - a.radius > i.canvas.h) {
                    a.y = s.y_top;
                    a.x = Math.random() * i.canvas.w;
                } else if (a.y + a.radius < 0) {
                    a.y = s.y_bottom;
                    a.x = Math.random() * i.canvas.w;
                }
                switch (i.particles.move.out_mode) {
                    case "bounce":
                        if (a.x + a.radius > i.canvas.w) {
                            a.vx = -a.vx;
                        } else if (a.x - a.radius < 0) {
                            a.vx = -a.vx;
                        }
                        if (a.y + a.radius > i.canvas.h) {
                            a.vy = -a.vy;
                        } else if (a.y - a.radius < 0) {
                            a.vy = -a.vy;
                        }
                        break;
                }
                if (isInArray("grab", i.interactivity.events.onhover.mode)) {
                    i.fn.modes.grabParticle(a);
                }
                if (isInArray("bubble", i.interactivity.events.onhover.mode) || isInArray("bubble", i.interactivity.events.onclick.mode)) {
                    i.fn.modes.bubbleParticle(a);
                }
                if (isInArray("repulse", i.interactivity.events.onhover.mode) || isInArray("repulse", i.interactivity.events.onclick.mode)) {
                    i.fn.modes.repulseParticle(a);
                }
                if (i.particles.line_linked.enable || i.particles.move.attract.enable) {
                    for (var n = e + 1; n < i.particles.array.length; n++) {
                        var r = i.particles.array[n];
                        if (i.particles.line_linked.enable) {
                            i.fn.interact.linkParticles(a, r);
                        }
                        if (i.particles.move.attract.enable) {
                            i.fn.interact.attractParticles(a, r);
                        }
                        if (i.particles.move.bounce) {
                            i.fn.interact.bounceParticles(a, r);
                        }
                    }
                }
            }
        };
        
        i.fn.particlesDraw = function() {
            i.canvas.ctx.clearRect(0, 0, i.canvas.w, i.canvas.h);
            i.fn.particlesUpdate();
            for (var e = 0; e < i.particles.array.length; e++) {
                var a = i.particles.array[e];
                a.draw();
            }
        };
        
        i.fn.particlesEmpty = function() {
            i.particles.array = [];
        };
        
        i.fn.particlesRefresh = function() {
            cancelRequestAnimFrame(i.fn.checkAnimFrame);
            cancelRequestAnimFrame(i.fn.drawAnimFrame);
            i.tmp.source_svg = undefined;
            i.tmp.img_obj = undefined;
            i.tmp.count_svg = 0;
            i.fn.particlesEmpty();
            i.fn.canvasClear();
            i.fn.vendors.start();
        };
        
        i.fn.interact.linkParticles = function(e, a) {
            var t = e.x - a.x;
            var s = e.y - a.y;
            var n = Math.sqrt(t * t + s * s);
            if (n <= i.particles.line_linked.distance) {
                var r = i.particles.line_linked.opacity - n / (1 / i.particles.line_linked.opacity) / i.particles.line_linked.distance;
                if (r > 0) {
                    var c = i.particles.line_linked.color_rgb_line;
                    i.canvas.ctx.strokeStyle = "rgba(" + c.r + "," + c.g + "," + c.b + "," + r + ")";
                    i.canvas.ctx.lineWidth = i.particles.line_linked.width;
                    i.canvas.ctx.beginPath();
                    i.canvas.ctx.moveTo(e.x, e.y);
                    i.canvas.ctx.lineTo(a.x, a.y);
                    i.canvas.ctx.stroke();
                    i.canvas.ctx.closePath();
                }
            }
        };
        
        i.fn.interact.attractParticles = function(e, a) {
            var t = e.x - a.x;
            var s = e.y - a.y;
            var n = Math.sqrt(t * t + s * s);
            if (n <= i.particles.line_linked.distance) {
                var r = t / (1000 * i.particles.move.attract.rotateX);
                var c = s / (1000 * i.particles.move.attract.rotateY);
                e.vx -= r;
                e.vy -= c;
                a.vx += r;
                a.vy += c;
            }
        };
        
        i.fn.interact.bounceParticles = function(e, a) {
            var t = e.x - a.x,
                i = e.y - a.y,
                s = Math.sqrt(t * t + i * i),
                n = e.radius + a.radius;
            if (n >= s) {
                e.vx = -e.vx;
                e.vy = -e.vy;
                a.vx = -a.vx;
                a.vy = -a.vy;
            }
        };
        
        i.fn.modes.pushParticles = function(e, a) {
            i.tmp.pushing = !0;
            for (var t = 0; t < e; t++) {
                i.particles.array.push(new i.fn.particle(i.particles.color, i.particles.opacity.value, {
                    x: a ? a.pos_x : Math.random() * i.canvas.w,
                    y: a ? a.pos_y : Math.random() * i.canvas.h
                }));
                if (t == e - 1) {
                    if (i.particles.move.enable) {
                        i.fn.particlesDraw();
                    }
                    i.tmp.pushing = !1;
                }
            }
        };
        
        i.fn.modes.removeParticles = function(e) {
            i.particles.array.splice(0, e);
            if (!i.particles.move.enable) {
                i.fn.particlesDraw();
            }
        };
        
        i.fn.modes.bubbleParticle = function(e) {
            function a() {
                e.opacity_bubble = e.opacity;
                e.radius_bubble = e.radius;
            }
        
            function t(a, t, s, n, c) {
                if (a != t) {
                    if (i.tmp.bubble_duration_end) {
                        if (s !== undefined) {
                            var o = n - p * (n - a) / i.interactivity.modes.bubble.duration,
                                l = a - o;
                            d = a + l;
                            if (c == "size") {
                                e.radius_bubble = d;
                            } else if (c == "opacity") {
                                e.opacity_bubble = d;
                            }
                        }
                    } else if (r <= i.interactivity.modes.bubble.distance) {
                        var v = s !== undefined ? s : n;
                        if (v != a) {
                            var d = n - p * (n - a) / i.interactivity.modes.bubble.duration;
                            if (c == "size") {
                                e.radius_bubble = d;
                            } else if (c == "opacity") {
                                e.opacity_bubble = d;
                            }
                        }
                    } else {
                        if (c == "size") {
                            e.radius_bubble = undefined;
                        } else if (c == "opacity") {
                            e.opacity_bubble = undefined;
                        }
                    }
                }
            }
        
            if (i.interactivity.events.onhover.enable && isInArray("bubble", i.interactivity.events.onhover.mode)) {
                var s = e.x - i.interactivity.mouse.pos_x,
                    n = e.y - i.interactivity.mouse.pos_y,
                    r = Math.sqrt(s * s + n * n),
                    c = 1 - r / i.interactivity.modes.bubble.distance;
                if (r <= i.interactivity.modes.bubble.distance) {
                    if (c >= 0 && i.interactivity.status == "mousemove") {
                        if (i.interactivity.modes.bubble.size != i.particles.size.value) {
                            if (i.interactivity.modes.bubble.size > i.particles.size.value) {
                                var o = e.radius + i.interactivity.modes.bubble.size * c;
                                if (o >= 0) {
                                    e.radius_bubble = o;
                                }
                            } else {
                                var l = e.radius - i.interactivity.modes.bubble.size,
                                    o = e.radius - l * c;
                                if (o > 0) {
                                    e.radius_bubble = o;
                                } else {
                                    e.radius_bubble = 0;
                                }
                            }
                        }
                        if (i.interactivity.modes.bubble.opacity != i.particles.opacity.value) {
                            if (i.interactivity.modes.bubble.opacity > i.particles.opacity.value) {
                                var v = i.interactivity.modes.bubble.opacity * c;
                                if (v > e.opacity && v <= i.interactivity.modes.bubble.opacity) {
                                    e.opacity_bubble = v;
                                }
                            } else {
                                var v = e.opacity - (i.particles.opacity.value - i.interactivity.modes.bubble.opacity) * c;
                                if (v < e.opacity && v >= i.interactivity.modes.bubble.opacity) {
                                    e.opacity_bubble = v;
                                }
                            }
                        }
                    }
                } else {
                    a();
                }
                if (i.interactivity.status == "mouseleave") {
                    a();
                }
            } else if (i.interactivity.events.onclick.enable && isInArray("bubble", i.interactivity.events.onclick.mode)) {
                if (i.tmp.bubble_clicking) {
                    var s = e.x - i.interactivity.mouse.click_pos_x,
                        n = e.y - i.interactivity.mouse.click_pos_y,
                        r = Math.sqrt(s * s + n * n),
                        p = ((new Date).getTime() - i.interactivity.mouse.click_time) / 1e3;
                    if (p > i.interactivity.modes.bubble.duration) {
                        i.tmp.bubble_duration_end = !0;
                    }
                    if (p > 2 * i.interactivity.modes.bubble.duration) {
                        i.tmp.bubble_clicking = !1;
                        i.tmp.bubble_duration_end = !1;
                    }
                }
                if (i.tmp.bubble_clicking) {
                    t(i.interactivity.modes.bubble.size, i.particles.size.value, e.radius_bubble, e.radius, "size");
                    t(i.interactivity.modes.bubble.opacity, i.particles.opacity.value, e.opacity_bubble, e.opacity, "opacity");
                }
            }
        };
        
        i.fn.modes.repulseParticle = function(e) {
            function a() {
                var a = Math.atan2(d, p);
                e.vx = u * Math.cos(a);
                e.vy = u * Math.sin(a);
                if (i.particles.move.out_mode == "bounce") {
                    var t = { x: e.x + e.vx, y: e.y + e.vy };
                    if (t.x + e.radius > i.canvas.w) {
                        e.vx = -e.vx;
                    } else if (t.x - e.radius < 0) {
                        e.vx = -e.vx;
                    }
                    if (t.y + e.radius > i.canvas.h) {
                        e.vy = -e.vy;
                    } else if (t.y - e.radius < 0) {
                        e.vy = -e.vy;
                    }
                }
            }
        
            if (i.interactivity.events.onhover.enable && isInArray("repulse", i.interactivity.events.onhover.mode) && i.interactivity.status == "mousemove") {
                var t = e.x - i.interactivity.mouse.pos_x,
                    s = e.y - i.interactivity.mouse.pos_y,
                    n = Math.sqrt(t * t + s * s),
                    r = { x: t / n, y: s / n },
                    c = i.interactivity.modes.repulse.distance,
                    o = 100,
                    l = clamp(1 / c * (-1 * Math.pow(n / c, 2) + 1) * c * o, 0, 50),
                    v = { x: e.x + r.x * l, y: e.y + r.y * l };
                if (i.particles.move.out_mode == "bounce") {
                    if (v.x - e.radius > 0 && v.x + e.radius < i.canvas.w) {
                        e.x = v.x;
                    }
                    if (v.y - e.radius > 0 && v.y + e.radius < i.canvas.h) {
                        e.y = v.y;
                    }
                } else {
                    e.x = v.x;
                    e.y = v.y;
                }
            } else if (i.interactivity.events.onclick.enable && isInArray("repulse", i.interactivity.events.onclick.mode)) {
                if (!i.tmp.repulse_finish) {
                    i.tmp.repulse_count++;
                    if (i.tmp.repulse_count == i.particles.array.length) {
                        i.tmp.repulse_finish = !0;
                    }
                }
                if (i.tmp.repulse_clicking) {
                    var c = Math.pow(i.interactivity.modes.repulse.distance / 6, 3),
                        p = i.interactivity.mouse.click_pos_x - e.x,
                        d = i.interactivity.mouse.click_pos_y - e.y,
                        m = p * p + d * d,
                        u = -c / m * 1;
                    if (c >= m) {
                        a();
                    }
                } else if (i.tmp.repulse_clicking == 0) {
                    e.vx = e.vx_i;
                    e.vy = e.vy_i;
                }
            }
        };
        
        i.fn.modes.grabParticle = function(e) {
            if (i.interactivity.events.onhover.enable && i.interactivity.status == "mousemove") {
                var a = e.x - i.interactivity.mouse.pos_x,
                    t = e.y - i.interactivity.mouse.pos_y,
                    s = Math.sqrt(a * a + t * t);
                if (s <= i.interactivity.modes.grab.distance) {
                    var n = i.interactivity.modes.grab.line_linked.opacity - s / (1 / i.interactivity.modes.grab.line_linked.opacity) / i.interactivity.modes.grab.distance;
                    if (n > 0) {
                        var r = i.particles.line_linked.color_rgb_line;
                        i.canvas.ctx.strokeStyle = "rgba(" + r.r + "," + r.g + "," + r.b + "," + n + ")";
                        i.canvas.ctx.lineWidth = i.particles.line_linked.width;
                        i.canvas.ctx.beginPath();
                        i.canvas.ctx.moveTo(e.x, e.y);
                        i.canvas.ctx.lineTo(i.interactivity.mouse.pos_x, i.interactivity.mouse.pos_y);
                        i.canvas.ctx.stroke();
                        i.canvas.ctx.closePath();
                    }
                }
            }
        };
        
        i.fn.vendors.eventsListeners = function() {
            if (i.interactivity.detect_on == "window") {
                i.interactivity.el = window;
            } else {
                i.interactivity.el = i.canvas.el;
            }
            if (i.interactivity.events.onhover.enable || i.interactivity.events.onclick.enable) {
                i.interactivity.el.addEventListener("mousemove", function(e) {
                    var a, t;
                    if (i.interactivity.el == window) {
                        a = e.clientX;
                        t = e.clientY;
                    } else {
                        a = e.offsetX || e.clientX;
                        t = e.offsetY || e.clientY;
                    }
                    i.interactivity.mouse.pos_x = a;
                    i.interactivity.mouse.pos_y = t;
                    if (i.tmp.retina) {
                        i.interactivity.mouse.pos_x *= i.canvas.pxratio;
                        i.interactivity.mouse.pos_y *= i.canvas.pxratio;
                    }
                    i.interactivity.status = "mousemove";
                });
                i.interactivity.el.addEventListener("mouseleave", function(e) {
                    i.interactivity.mouse.pos_x = null;
                    i.interactivity.mouse.pos_y = null;
                    i.interactivity.status = "mouseleave";
                });
            }
            if (i.interactivity.events.onclick.enable) {
                i.interactivity.el.addEventListener("click", function() {
                    i.interactivity.mouse.click_pos_x = i.interactivity.mouse.pos_x;
                    i.interactivity.mouse.click_pos_y = i.interactivity.mouse.pos_y;
                    i.interactivity.mouse.click_time = (new Date).getTime();
                    if (i.interactivity.events.onclick.enable) {
                        switch (i.interactivity.events.onclick.mode) {
                            case "push":
                                if (i.particles.move.enable) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb, i.interactivity.mouse);
                                } else if (i.interactivity.modes.push.particles_nb == 1) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb, i.interactivity.mouse);
                                } else if (i.interactivity.modes.push.particles_nb > 1) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb);
                                }
                                break;
                            case "remove":
                                i.fn.modes.removeParticles(i.interactivity.modes.remove.particles_nb);
                                break;
                            case "bubble":
                                i.tmp.bubble_clicking = !0;
                                break;
                            case "repulse":
                                i.tmp.repulse_clicking = !0;
                                i.tmp.repulse_count = 0;
                                i.tmp.repulse_finish = !1;
                                setTimeout(function() {
                                    i.tmp.repulse_clicking = !1;
                                }, 1e3 * i.interactivity.modes.repulse.duration);
                                break;
                        }
                    }
                });
            }
        };
        
        i.fn.vendors.densityAutoParticles = function() {
            if (i.particles.number.density.enable) {
                var e = i.canvas.el.width * i.canvas.el.height / 1e3;
                if (i.tmp.retina) {
                    e /= 2 * i.canvas.pxratio;
                }
                var a = e * i.particles.number.value / i.particles.number.density.value_area,
                    t = i.particles.array.length - a;
                if (t < 0) {
                    i.fn.modes.pushParticles(Math.abs(t));
                } else {
                    i.fn.modes.removeParticles(t);
                }
            }
        };
        
        i.fn.vendors.checkOverlap = function(e, a) {
            for (var t = 0; t < i.particles.array.length; t++) {
                var s = i.particles.array[t],
                    n = e.x - s.x,
                    r = e.y - s.y,
                    c = Math.sqrt(n * n + r * r);
                if (c <= e.radius + s.radius) {
                    e.x = a ? a.x : Math.random() * i.canvas.w;
                    e.y = a ? a.y : Math.random() * i.canvas.h;
                    i.fn.vendors.checkOverlap(e);
                }
            }
        };
        
        i.fn.vendors.createSvgImg = function(e) {
            var a = i.tmp.source_svg,
                t = /#([0-9A-F]{3,6})/gi,
                s = a.replace(t, function(a, t, i, s) {
                    var n;
                    if (e.color.rgb) {
                        n = "rgba(" + e.color.rgb.r + "," + e.color.rgb.g + "," + e.color.rgb.b + "," + e.opacity + ")";
                    } else {
                        n = "hsla(" + e.color.hsl.h + "," + e.color.hsl.s + "%," + e.color.hsl.l + "%," + e.opacity + ")";
                    }
                    return n;
                }),
                n = new Blob([s], { type: "image/svg+xml;charset=utf-8" }),
                r = window.URL || window.webkitURL || window,
                c = r.createObjectURL(n),
                o = new Image();
            o.addEventListener("load", function() {
                e.img.obj = o;
                e.img.loaded = !0;
                r.revokeObjectURL(c);
                i.tmp.count_svg++;
            });
            o.src = c;
        };
        
        i.fn.vendors.destroypJS = function() {
            cancelAnimationFrame(i.fn.drawAnimFrame);
            t.remove();
            pJSDom = null;
        };
        
        i.fn.vendors.drawShape = function(e, a, t, i, s, n) {
            var r = s * n,
                c = s / n,
                o = 180 * (c - 2) / c,
                l = Math.PI - Math.PI * o / 180;
            e.save();
            e.beginPath();
            e.translate(a, t);
            e.moveTo(0, 0);
            for (var v = 0; v < r; v++) {
                e.lineTo(i, 0);
                e.translate(i, 0);
                e.rotate(l);
            }
            e.fill();
            e.restore();
        };
        
        i.fn.vendors.exportImg = function() {
            window.open(i.canvas.el.toDataURL("image/png"), "_blank");
        };
        
        i.fn.vendors.loadImg = function(e) {
            i.tmp.img_error = undefined;
            if (i.particles.shape.image.src != "") {
                if (e == "svg") {
                    var a = new XMLHttpRequest();
                    a.open("GET", i.particles.shape.image.src);
                    a.onreadystatechange = function(e) {
                        if (a.readyState == 4) {
                            if (a.status == 200) {
                                i.tmp.source_svg = e.currentTarget.response;
                                i.fn.vendors.checkBeforeDraw();
                            } else {
                                console.log("Error pJS - Image not found");
                                i.tmp.img_error = !0;
                            }
                        }
                    };
                    a.send();
                } else {
                    var t = new Image();
                    t.addEventListener("load", function() {
                        i.tmp.img_obj = t;
                        i.fn.vendors.checkBeforeDraw();
                    });
                    t.src = i.particles.shape.image.src;
                }
            } else {
                console.log("Error pJS - No image.src");
                i.tmp.img_error = !0;
            }
        };
        
        i.fn.vendors.draw = function() {
            if (i.particles.shape.type == "image") {
                if (i.tmp.img_type == "svg") {
                    if (i.tmp.count_svg >= i.particles.number.value) {
                        i.fn.particlesDraw();
                        if (i.particles.move.enable) {
                            i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                        } else {
                            cancelRequestAnimFrame(i.fn.drawAnimFrame);
                        }
                    } else if (!i.tmp.img_error) {
                        i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                    }
                } else if (i.tmp.img_obj !== undefined) {
                    i.fn.particlesDraw();
                    if (i.particles.move.enable) {
                        i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                    } else {
                        cancelRequestAnimFrame(i.fn.drawAnimFrame);
                    }
                } else if (!i.tmp.img_error) {
                    i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                }
            } else {
                i.fn.particlesDraw();
                if (i.particles.move.enable) {
                    i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                } else {
                    cancelRequestAnimFrame(i.fn.drawAnimFrame);
                }
            }
        };
        
        i.fn.vendors.checkBeforeDraw = function() {
            ifi.fn.interact.bounceParticles = function(e, a) {
            var t = e.x - a.x,
                i = e.y - a.y,
                s = Math.sqrt(t * t + i * i),
                n = e.radius + a.radius;
            if (n >= s) {
                e.vx = -e.vx;
                e.vy = -e.vy;
                a.vx = -a.vx;
                a.vy = -a.vy;
            }
        };
        
        i.fn.modes.pushParticles = function(e, a) {
            i.tmp.pushing = !0;
            for (var t = 0; t < e; t++) {
                i.particles.array.push(new i.fn.particle(i.particles.color, i.particles.opacity.value, {
                    x: a ? a.pos_x : Math.random() * i.canvas.w,
                    y: a ? a.pos_y : Math.random() * i.canvas.h
                }));
                if (t == e - 1) {
                    if (i.particles.move.enable) {
                        i.fn.particlesDraw();
                    }
                    i.tmp.pushing = !1;
                }
            }
        };
        
        i.fn.modes.removeParticles = function(e) {
            i.particles.array.splice(0, e);
            if (!i.particles.move.enable) {
                i.fn.particlesDraw();
            }
        };
        
        i.fn.modes.bubbleParticle = function(e) {
            function a() {
                e.opacity_bubble = e.opacity;
                e.radius_bubble = e.radius;
            }
        
            function t(a, t, s, n, c) {
                if (a != t) {
                    if (i.tmp.bubble_duration_end) {
                        if (s !== undefined) {
                            var o = n - p * (n - a) / i.interactivity.modes.bubble.duration,
                                l = a - o;
                            d = a + l;
                            if (c == "size") {
                                e.radius_bubble = d;
                            } else if (c == "opacity") {
                                e.opacity_bubble = d;
                            }
                        }
                    } else if (r <= i.interactivity.modes.bubble.distance) {
                        var v = s !== undefined ? s : n;
                        if (v != a) {
                            var d = n - p * (n - a) / i.interactivity.modes.bubble.duration;
                            if (c == "size") {
                                e.radius_bubble = d;
                            } else if (c == "opacity") {
                                e.opacity_bubble = d;
                            }
                        }
                    } else {
                        if (c == "size") {
                            e.radius_bubble = undefined;
                        } else if (c == "opacity") {
                            e.opacity_bubble = undefined;
                        }
                    }
                }
            }
        
            if (i.interactivity.events.onhover.enable && isInArray("bubble", i.interactivity.events.onhover.mode)) {
                var s = e.x - i.interactivity.mouse.pos_x,
                    n = e.y - i.interactivity.mouse.pos_y,
                    r = Math.sqrt(s * s + n * n),
                    c = 1 - r / i.interactivity.modes.bubble.distance;
                if (r <= i.interactivity.modes.bubble.distance) {
                    if (c >= 0 && i.interactivity.status == "mousemove") {
                        if (i.interactivity.modes.bubble.size != i.particles.size.value) {
                            if (i.interactivity.modes.bubble.size > i.particles.size.value) {
                                var o = e.radius + i.interactivity.modes.bubble.size * c;
                                if (o >= 0) {
                                    e.radius_bubble = o;
                                }
                            } else {
                                var l = e.radius - i.interactivity.modes.bubble.size,
                                    o = e.radius - l * c;
                                if (o > 0) {
                                    e.radius_bubble = o;
                                } else {
                                    e.radius_bubble = 0;
                                }
                            }
                        }
                        if (i.interactivity.modes.bubble.opacity != i.particles.opacity.value) {
                            if (i.interactivity.modes.bubble.opacity > i.particles.opacity.value) {
                                var v = i.interactivity.modes.bubble.opacity * c;
                                if (v > e.opacity && v <= i.interactivity.modes.bubble.opacity) {
                                    e.opacity_bubble = v;
                                }
                            } else {
                                var v = e.opacity - (i.particles.opacity.value - i.interactivity.modes.bubble.opacity) * c;
                                if (v < e.opacity && v >= i.interactivity.modes.bubble.opacity) {
                                    e.opacity_bubble = v;
                                }
                            }
                        }
                    }
                } else {
                    a();
                }
                if (i.interactivity.status == "mouseleave") {
                    a();
                }
            } else if (i.interactivity.events.onclick.enable && isInArray("bubble", i.interactivity.events.onclick.mode)) {
                if (i.tmp.bubble_clicking) {
                    var s = e.x - i.interactivity.mouse.click_pos_x,
                        n = e.y - i.interactivity.mouse.click_pos_y,
                        r = Math.sqrt(s * s + n * n),
                        p = ((new Date).getTime() - i.interactivity.mouse.click_time) / 1e3;
                    if (p > i.interactivity.modes.bubble.duration) {
                        i.tmp.bubble_duration_end = !0;
                    }
                    if (p > 2 * i.interactivity.modes.bubble.duration) {
                        i.tmp.bubble_clicking = !1;
                        i.tmp.bubble_duration_end = !1;
                    }
                }
                if (i.tmp.bubble_clicking) {
                    t(i.interactivity.modes.bubble.size, i.particles.size.value, e.radius_bubble, e.radius, "size");
                    t(i.interactivity.modes.bubble.opacity, i.particles.opacity.value, e.opacity_bubble, e.opacity, "opacity");
                }
            }
        };
        
        i.fn.modes.repulseParticle = function(e) {
            function a() {
                var a = Math.atan2(d, p);
                e.vx = u * Math.cos(a);
                e.vy = u * Math.sin(a);
                if (i.particles.move.out_mode == "bounce") {
                    var t = { x: e.x + e.vx, y: e.y + e.vy };
                    if (t.x + e.radius > i.canvas.w) {
                        e.vx = -e.vx;
                    } else if (t.x - e.radius < 0) {
                        e.vx = -e.vx;
                    }
                    if (t.y + e.radius > i.canvas.h) {
                        e.vy = -e.vy;
                    } else if (t.y - e.radius < 0) {
                        e.vy = -e.vy;
                    }
                }
            }
        
            if (i.interactivity.events.onhover.enable && isInArray("repulse", i.interactivity.events.onhover.mode) && i.interactivity.status == "mousemove") {
                var t = e.x - i.interactivity.mouse.pos_x,
                    s = e.y - i.interactivity.mouse.pos_y,
                    n = Math.sqrt(t * t + s * s),
                    r = { x: t / n, y: s / n },
                    c = i.interactivity.modes.repulse.distance,
                    o = 100,
                    l = clamp(1 / c * (-1 * Math.pow(n / c, 2) + 1) * c * o, 0, 50),
                    v = { x: e.x + r.x * l, y: e.y + r.y * l };
                if (i.particles.move.out_mode == "bounce") {
                    if (v.x - e.radius > 0 && v.x + e.radius < i.canvas.w) {
                        e.x = v.x;
                    }
                    if (v.y - e.radius > 0 && v.y + e.radius < i.canvas.h) {
                        e.y = v.y;
                    }
                } else {
                    e.x = v.x;
                    e.y = v.y;
                }
            } else if (i.interactivity.events.onclick.enable && isInArray("repulse", i.interactivity.events.onclick.mode)) {
                if (!i.tmp.repulse_finish) {
                    i.tmp.repulse_count++;
                    if (i.tmp.repulse_count == i.particles.array.length) {
                        i.tmp.repulse_finish = !0;
                    }
                }
                if (i.tmp.repulse_clicking) {
                    var c = Math.pow(i.interactivity.modes.repulse.distance / 6, 3),
                        p = i.interactivity.mouse.click_pos_x - e.x,
                        d = i.interactivity.mouse.click_pos_y - e.y,
                        m = p * p + d * d,
                        u = -c / m * 1;
                    if (c >= m) {
                        a();
                    }
                } else if (i.tmp.repulse_clicking == 0) {
                    e.vx = e.vx_i;
                    e.vy = e.vy_i;
                }
            }
        };
        
        i.fn.modes.grabParticle = function(e) {
            if (i.interactivity.events.onhover.enable && i.interactivity.status == "mousemove") {
                var a = e.x - i.interactivity.mouse.pos_x,
                    t = e.y - i.interactivity.mouse.pos_y,
                    s = Math.sqrt(a * a + t * t);
                if (s <= i.interactivity.modes.grab.distance) {
                    var n = i.interactivity.modes.grab.line_linked.opacity - s / (1 / i.interactivity.modes.grab.line_linked.opacity) / i.interactivity.modes.grab.distance;
                    if (n > 0) {
                        var r = i.particles.line_linked.color_rgb_line;
                        i.canvas.ctx.strokeStyle = "rgba(" + r.r + "," + r.g + "," + r.b + "," + n + ")";
                        i.canvas.ctx.lineWidth = i.particles.line_linked.width;
                        i.canvas.ctx.beginPath();
                        i.canvas.ctx.moveTo(e.x, e.y);
                        i.canvas.ctx.lineTo(i.interactivity.mouse.pos_x, i.interactivity.mouse.pos_y);
                        i.canvas.ctx.stroke();
                        i.canvas.ctx.closePath();
                    }
                }
            }
        };
        
        i.fn.vendors.eventsListeners = function() {
            if (i.interactivity.detect_on == "window") {
                i.interactivity.el = window;
            } else {
                i.interactivity.el = i.canvas.el;
            }
            if (i.interactivity.events.onhover.enable || i.interactivity.events.onclick.enable) {
                i.interactivity.el.addEventListener("mousemove", function(e) {
                    var a, t;
                    if (i.interactivity.el == window) {
                        a = e.clientX;
                        t = e.clientY;
                    } else {
                        a = e.offsetX || e.clientX;
                        t = e.offsetY || e.clientY;
                    }
                    i.interactivity.mouse.pos_x = a;
                    i.interactivity.mouse.pos_y = t;
                    if (i.tmp.retina) {
                        i.interactivity.mouse.pos_x *= i.canvas.pxratio;
                        i.interactivity.mouse.pos_y *= i.canvas.pxratio;
                    }
                    i.interactivity.status = "mousemove";
                });
                i.interactivity.el.addEventListener("mouseleave", function(e) {
                    i.interactivity.mouse.pos_x = null;
                    i.interactivity.mouse.pos_y = null;
                    i.interactivity.status = "mouseleave";
                });
            }
            if (i.interactivity.events.onclick.enable) {
                i.interactivity.el.addEventListener("click", function() {
                    i.interactivity.mouse.click_pos_x = i.interactivity.mouse.pos_x;
                    i.interactivity.mouse.click_pos_y = i.interactivity.mouse.pos_y;
                    i.interactivity.mouse.click_time = (new Date).getTime();
                    if (i.interactivity.events.onclick.enable) {
                        switch (i.interactivity.events.onclick.mode) {
                            case "push":
                                if (i.particles.move.enable) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb, i.interactivity.mouse);
                                } else if (i.interactivity.modes.push.particles_nb == 1) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb, i.interactivity.mouse);
                                } else if (i.interactivity.modes.push.particles_nb > 1) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb);
                                }
                                break;
                            case "remove":
                                i.fn.modes.removeParticles(i.interactivity.modes.remove.particles_nb);
                                break;
                            case "bubble":
                                i.tmp.bubble_clicking = !0;
                                break;
                            case "repulse":
                                i.tmp.repulse_clicking = !0;
                                i.tmp.repulse_count = 0;
                                i.tmp.repulse_finish = !1;
                                setTimeout(function() {
                                    i.tmp.repulse_clicking = !1;
                                }, 1e3 * i.interactivity.modes.repulse.duration);
                                break;
                        }
                    }
                });
            }
        };
        
        i.fn.vendors.densityAutoParticles = function() {
            if (i.particles.number.density.enable) {
                var e = i.canvas.el.width * i.canvas.el.height / 1e3;
                if (i.tmp.retina) {
                    e /= 2 * i.canvas.pxratio;
                }
                var a = e * i.particles.number.value / i.particles.number.density.value_area,
                    t = i.particles.array.length - a;
                if (t < 0) {
                    i.fn.modes.pushParticles(Math.abs(t));
                } else {
                    i.fn.modes.removeParticles(t);
                }
            }
        };
        
        i.fn.vendors.checkOverlap = function(e, a) {
            for (var t = 0; t < i.particles.array.length; t++) {
                var s = i.particles.array[t],
                    n = e.x - s.x,
                    r = e.y - s.y,
                    c = Math.sqrt(n * n + r * r);
                if (c <= e.radius + s.radius) {
                    e.x = a ? a.x : Math.random() * i.canvas.w;
                    e.y = a ? a.y : Math.random() * i.canvas.h;
                    i.fn.vendors.checkOverlap(e);
                }
            }
        };
        
        i.fn.vendors.createSvgImg = function(e) {
            var a = i.tmp.source_svg,
                t = /#([0-9A-F]{3,6})/gi,
                s = a.replace(t, function(a, t, i, s) {
                    var n;
                    if (e.color.rgb) {
                        n = "rgba(" + e.color.rgb.r + "," + e.color.rgb.g + "," + e.color.rgb.b + "," + e.opacity + ")";
                    } else {
                        n = "hsla(" + e.color.hsl.h + "," + e.color.hsl.s + "%," + e.color.hsl.l + "%," + e.opacity + ")";
                    }
                    return n;
                }),
                n = new Blob([s], { type: "image/svg+xml;charset=utf-8" }),
                r = window.URL || window.webkitURL || window,
                c = r.createObjectURL(n),
                o = new Image();
            o.addEventListener("load", function() {
                e.img.obj = o;
                e.img.loaded = !0;
                r.revokeObjectURL(c);
                i.tmp.count_svg++;
            });
            o.src = c;
        };
        
        i.fn.vendors.destroypJS = function() {
            cancelAnimationFrame(i.fn.drawAnimFrame);
            t.remove();
            pJSDom = null;
        };
        
        i.fn.vendors.drawShape = function(e, a, t, i, s, n) {
            var r = s * n,
                c = s / n,
                o = 180 * (c - 2) / c,
                l = Math.PI - Math.PI * o / 180;
            e.save();
            e.beginPath();
            e.translate(a, t);
            e.moveTo(0, 0);
            for (var v = 0; v < r; v++) {
                e.lineTo(i, 0);
                e.translate(i, 0);
            }
            e.fill();
            e.restore();
        };
        
        i.fn.vendors.exportImg = function() {
            window.open(i.canvas.el.toDataURL("image/png"), "_blank");
        };
        
        i.fn.vendors.loadImg = function(e) {
            i.tmp.img_error = undefined;
            if (i.particles.shape.image.src != "") {
                if (e == "svg") {
                    var a = new XMLHttpRequest();
                    a.open("GET", i.particles.shape.image.src);
                    a.onreadystatechange = function(e) {
                        if (a.readyState == 4) {
                            if (a.status == 200) {
                                i.tmp.source_svg = e.currentTarget.response;
                                i.fn.vendors.checkBeforeDraw();
                            } else {
                                console.log("Error pJS - Image not found");
                                i.tmp.img_error = !0;
                            }
                        }
                    };
                    a.send();
                } else {
                    var t = new Image();
                    t.addEventListener("load", function() {
                        i.tmp.img_obj = t;
                        i.fn.vendors.checkBeforeDraw();
                    });
                    t.src = i.particles.shape.image.src;
                }
            } else {
                console.log("Error pJS - No image.src");
                i.tmp.img_error = !0;
            }
        };
        
        i.fn.vendors.draw = function() {
            if (i.particles.shape.type == "image") {
                if (i.tmp.img_type == "svg") {
                    if (i.tmp.count_svg >= i.particles.number.value) {
                        i.fn.particlesDraw();
                        if (i.particles.move.enable) {
                            i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                        } else {
                            cancelRequestAnimFrame(i.fn.drawAnimFrame);
                        }
                    } else if (!i.tmp.img_error) {
                        i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                    }
                } else if (i.tmp.img_obj !== undefined) {
                    i.fn.particlesDraw();
                    if (i.particles.move.enable) {
                        i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                    } else {
                        cancelRequestAnimFrame(i.fn.drawAnimFrame);
                    }
                } else if (!i.tmp.img_error) {
                    i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                }
            } else {
                i.fn.particlesDraw();
                if (i.particles.move.enable) {
                    i.fn.drawAnimFrame = requestAnimFrame(i.fn.vendors.draw);
                } else {
                    cancelRequestAnimFrame(i.fn.drawAnimFrame);
                }
            }
        };
        
        i.fn.vendors.checkBeforeDraw = function() {
            if (i.particles.shape.type == "image") {
                if (i.tmp.img_type == "svg" && i.tmp.source_svg == undefined) {
                    i.tmp.checkAnimFrame = requestAnimFrame(check);
                } else {
                    cancelRequestAnimFrame(i.tmp.checkAnimFrame);
                    if (!i.tmp.img_error) {
                        i.fn.vendors.init();
                        i.fn.vendors.draw();
                    }
                }
            } else {
                i.fn.vendors.init();
                i.fn.vendors.draw();
            }
        };
        
        i.fn.vendors.init = function() {
            i.fn.retinaInit();
            i.fn.canvasInit();
            i.fn.canvasSize();
            i.fn.canvasPaint();
            i.fn.particlesCreate();
            i.fn.vendors.densityAutoParticles();
            i.particles.line_linked.color_rgb_line = hexToRgb(i.particles.line_linked.color);
        };
        
        i.fn.vendors.start = function() {
            if (isInArray("image", i.particles.shape.type)) {
                i.tmp.img_type = i.particles.shape.image.src.substr(i.particles.shape.image.src.length - 3);
                i.fn.vendors.loadImg(i.tmp.img_type);
            } else {
                i.fn.vendors.checkBeforeDraw();
            }
        };
        
        i.fn.vendors.eventsListeners = function() {
            if (i.interactivity.detect_on == "window") {
                i.interactivity.el = window;
            } else {
                i.interactivity.el = i.canvas.el;
            }
        
            if (i.interactivity.events.onhover.enable || i.interactivity.events.onclick.enable) {
                i.interactivity.el.addEventListener("mousemove", function(e) {
                    var a, t;
                    if (i.interactivity.el == window) {
                        a = e.clientX;
                        t = e.clientY;
                    } else {
                        a = e.offsetX || e.clientX;
                        t = e.offsetY || e.clientY;
                    }
                    i.interactivity.mouse.pos_x = a;
                    i.interactivity.mouse.pos_y = t;
                    if (i.tmp.retina) {
                        i.interactivity.mouse.pos_x *= i.canvas.pxratio;
                        i.interactivity.mouse.pos_y *= i.canvas.pxratio;
                    }
                    i.interactivity.status = "mousemove";
                });
        
                i.interactivity.el.addEventListener("mouseleave", function(e) {
                    i.interactivity.mouse.pos_x = null;
                    i.interactivity.mouse.pos_y = null;
                    i.interactivity.status = "mouseleave";
                });
            }
        
            if (i.interactivity.events.onclick.enable) {
                i.interactivity.el.addEventListener("click", function() {
                    i.interactivity.mouse.click_pos_x = i.interactivity.mouse.pos_x;
                    i.interactivity.mouse.click_pos_y = i.interactivity.mouse.pos_y;
                    i.interactivity.mouse.click_time = (new Date).getTime();
        
                    if (i.interactivity.events.onclick.enable) {
                        switch (i.interactivity.events.onclick.mode) {
                            case "push":
                                if (i.particles.move.enable) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb, i.interactivity.mouse);
                                } else if (i.interactivity.modes.push.particles_nb == 1) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb, i.interactivity.mouse);
                                } else if (i.interactivity.modes.push.particles_nb > 1) {
                                    i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb);
                                }
                                break;
                            case "remove":
                                i.fn.modes.removeParticles(i.interactivity.modes.remove.particles_nb);
                                break;
                            case "bubble":
                                i.tmp.bubble_clicking = true;
                                break;
                            case "repulse":
                                i.tmp.repulse_clicking = true;
                                i.tmp.repulse_count = 0;
                                i.tmp.repulse_finish = false;
                                setTimeout(function() {
                                    i.tmp.repulse_clicking = false;
                                }, 1000 * i.interactivity.modes.repulse.duration);
                                break;
                        }
                    }
                });
            }
        };
        
        Object.deepExtend = function(destination, source) {
            for (var property in source) {
                if (source[property] && source[property].constructor && source[property].constructor === Object) {
                    destination[property] = destination[property] || {};
                    arguments.callee(destination[property], source[property]);
                } else {
                    destination[property] = source[property];
                }
            }
            return destination;
        };
        
        window.requestAnimFrame = (function() {
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function(callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();
        
        window.cancelRequestAnimFrame = (function() {
            return window.cancelAnimationFrame ||
                window.webkitCancelRequestAnimationFrame ||
                window.mozCancelRequestAnimationFrame ||
                window.oCancelRequestAnimationFrame ||
                window.msCancelRequestAnimationFrame ||
                clearTimeout;
        })();
        
        window.pJSDom = [];
        
        window.particlesJS = function(tag_id, params) {
            if (typeof(tag_id) != "string") {
                params = tag_id;
                tag_id = "particles-js";
            }
            if (!tag_id) {
                tag_id = "particles-js";
            }
        
            var tag = document.getElementById(tag_id),
                canvas_class = "particles-js-canvas-el",
                exist_canvas = tag.getElementsByClassName(canvas_class);
        
            if (exist_canvas.length) {
                while (exist_canvas.length > 0) {
                    tag.removeChild(exist_canvas[0]);
                }
            }
        
            var canvas_el = document.createElement("canvas");
            canvas_el.className = canvas_class;
            canvas_el.style.width = "100%";
            canvas_el.style.height = "100%";
        
            var canvas = document.getElementById(tag_id).appendChild(canvas_el);
        
            if (canvas != null) {
                pJSDom.push(new pJS(tag_id, params));
            }
            };
        
        window.particlesJS.load = function(tag_id, path_config_json, callback) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", path_config_json);
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var params = JSON.parse(data.currentTarget.response);
                        window.particlesJS(tag_id, params);
                        if (callback) callback();
                    } else {
                        console.log("Error pJS - XMLHttpRequest status: " + xhr.status);
                        console.log("Error pJS - File config not found");
                    }
                }
            };
            xhr.send();
        };
        };
        };